diff -X ../utils/updatePatches.excludes -Nru upstream/pkg/directory/System/Directory/Internal/Config.hs boot/pkg/directory/System/Directory/Internal/Config.hs
--- upstream/pkg/directory/System/Directory/Internal/Config.hs	2001-09-09 13:46:40.000000000 +1200
+++ boot/pkg/directory/System/Directory/Internal/Config.hs	2021-06-10 20:42:21.000000000 +1200
@@ -1,9 +1,25 @@
 {-# LANGUAGE CPP #-}
+#if defined(ghcjs_HOST_OS)
+{-# LANGUAGE JavaScriptFFI, GHCForeignImportPrim #-}
+#endif
 module System.Directory.Internal.Config where
+
+#if defined(ghcjs_HOST_OS)
+import GHCJS.Prim
+
+foreign import javascript unsafe
+  "h$directory_exeExtension()"
+  js_exeExtension :: JSVal
+
+exeExtension :: String
+exeExtension = fromJSString js_exeExtension
+
+#else
 #include <HsDirectoryConfig.h>
 
 exeExtension :: String
 exeExtension = EXE_EXTENSION
+#endif
 -- We avoid using #const_str from hsc because it breaks cross-compilation
 -- builds, so we use this ugly workaround where we simply paste the C string
 -- literal directly in here.  This will probably break if the EXE_EXTENSION
diff -X ../utils/updatePatches.excludes -Nru upstream/pkg/directory/System/Directory/Internal/GHCJS.hs boot/pkg/directory/System/Directory/Internal/GHCJS.hs
--- upstream/pkg/directory/System/Directory/Internal/GHCJS.hs	1970-01-01 12:00:00.000000000 +1200
+++ boot/pkg/directory/System/Directory/Internal/GHCJS.hs	2021-06-10 20:42:21.000000000 +1200
@@ -0,0 +1,496 @@
+{-# LANGUAGE CPP #-}
+#if defined(ghcjs_HOST_OS)
+{-# LANGUAGE ForeignFunctionInterface,
+             JavaScriptFFI,
+             UnliftedFFITypes,
+             MagicHash,
+             Trustworthy,
+             TupleSections
+  #-}
+#endif
+module System.Directory.Internal.GHCJS where
+
+#if defined(ghcjs_HOST_OS)
+
+import Data.Bits
+import Data.Maybe (listToMaybe)
+import Data.Time (UTCTime)
+import Data.Time.Clock.POSIX
+  (POSIXTime, posixSecondsToUTCTime, utcTimeToPOSIXSeconds)
+import Foreign.C.Error
+import System.IO.Error
+import System.FilePath ((</>), isRelative, normalise, splitSearchPath)
+
+import GHCJS.Prim
+
+import System.Directory.Internal.Common
+import System.Directory.Internal.Config (exeExtension)
+
+
+type JSObject = JSVal
+type JSString = JSVal
+type JSArray  = JSVal
+
+throwErrnoIfJSNull :: String -> IO JSVal -> IO JSVal
+throwErrnoIfJSNull msg m = do
+  r <- m
+  if isNull r then throwErrno msg
+              else return r
+
+foreign import javascript unsafe
+  "h$directory_getCurrentDirectory()"
+  js_getCurrentDirectory :: IO JSString
+
+exeExtensionInternal :: String
+exeExtensionInternal = exeExtension
+
+--------------------------------------------------------------
+
+-- the object is treated as immutable
+newtype Metadata = Metadata JSObject
+
+copyFileWithMetadataInternal :: (Metadata -> FilePath -> IO ())
+                             -> (Metadata -> FilePath -> IO ())
+                             -> FilePath
+                             -> FilePath
+                             -> IO ()
+copyFileWithMetadataInternal copyPermissionsFromMetadata
+                             copyTimesFromMetadata
+                             src
+                             dst = do
+  st <- getFileMetadata src
+  js_copyFileContents src' dst'
+  tryCopyOwnerAndGroupFromMetadata st dst'
+  copyPermissionsFromMetadata st dst
+  copyTimesFromMetadata st dst
+    where
+      src' = toJSString src
+      dst' = toJSString dst
+
+copyOwnerFromMetadata :: Metadata -> JSString -> IO ()
+copyOwnerFromMetadata st dst = do
+  js_setOwnerAndGroup dst (js_getFileStatusOwner st) (-1)
+
+copyGroupFromMetadata :: Metadata -> JSString -> IO ()
+copyGroupFromMetadata st dst = do
+  js_setOwnerAndGroup dst (-1) (js_getFileStatusOwner st)
+
+tryCopyOwnerAndGroupFromMetadata :: Metadata -> JSString -> IO ()
+tryCopyOwnerAndGroupFromMetadata st dst = do
+  ignoreIOExceptions (copyOwnerFromMetadata st dst)
+  ignoreIOExceptions (copyGroupFromMetadata st dst)
+  --where
+  --  dst' = toJSString dst
+
+getSymbolicLinkMetadata :: FilePath -> IO Metadata
+getSymbolicLinkMetadata path =
+  (`ioeSetFileName` path) `modifyIOError` do
+    cpath <- throwErrnoIfJSNull "getSymbolicLinkMetadata" $
+      js_canonicalizePath (toJSString path)
+    mdata <- throwErrnoIfJSNull "getSymbolicLinkMetadata" $
+      js_getFileOrSymlinkStatus cpath
+    pure (Metadata mdata)
+
+getFileMetadata :: FilePath -> IO Metadata
+getFileMetadata path = getFileMetadata' (toJSString path)
+
+getFileMetadata' :: JSString -> IO Metadata
+getFileMetadata' path =
+  (`ioeSetFileName` (fromJSString path)) `modifyIOError` do
+      cpath <- throwErrnoIfJSNull "getFileMetadata" $
+        js_canonicalizePath path
+      mdata <- throwErrnoIfJSNull "getFileMetadata" $
+        js_getFileStatus cpath
+      pure (Metadata mdata)
+
+createSymbolicLink :: Bool -> FilePath -> FilePath -> IO ()
+createSymbolicLink _ = createSymbolicLinkInternal
+
+createSymbolicLinkInternal :: FilePath -> FilePath -> IO ()
+createSymbolicLinkInternal target link =
+  throwErrnoIfMinus1_ "createSymbolicLink" $
+    js_createSymbolicLink (toJSString target) (toJSString link)
+
+readSymbolicLink :: FilePath -> IO FilePath
+readSymbolicLink path = do
+  tgt <- throwErrnoIfJSNull "readSymbolicLink" $
+    js_readSymbolicLink (toJSString path)
+  pure (fromJSString tgt)
+
+prependCurrentDirectory :: FilePath -> IO FilePath
+prependCurrentDirectory path
+  | isRelative path =
+    ((`ioeAddLocation` "prependCurrentDirectory") .
+     (`ioeSetFileName` path)) `modifyIOError` do
+      (</> path) <$> getCurrentDirectoryInternal
+  | otherwise = pure path
+
+getCurrentDirectoryInternal :: IO FilePath
+getCurrentDirectoryInternal =
+  (fromJSString `fmap` throwErrnoIfJSNull "getCurrentDirectory"
+                                          js_getCurrentDirectory)
+
+createDirectoryInternal :: FilePath -> IO ()
+createDirectoryInternal path =
+  throwErrnoIfMinus1_ "createDirectory" $
+    js_createDirectory (toJSString path)
+
+-- fixme check if this does the right thing
+removePathInternal :: Bool -> FilePath -> IO ()
+removePathInternal True  = removeDirectoryInternal
+removePathInternal False = removeFileInternal
+
+renamePathInternal :: FilePath -> FilePath -> IO ()
+renamePathInternal opath npath =
+  throwErrnoIfMinus1_ "renamePath" $
+    js_renamePath (toJSString opath) (toJSString npath)
+
+-- | On POSIX, equivalent to 'simplifyPosix'.
+simplify :: FilePath -> FilePath
+simplify = simplifyPosix -- FIXME should we assume POSIX paths with GHCJS?
+
+removeDirectoryInternal :: FilePath -> IO ()
+removeDirectoryInternal path =
+  throwErrnoIfMinus1_ "removeDirectory" $
+    js_removeDirectory (toJSString path)
+
+removeFileInternal :: FilePath -> IO ()
+removeFileInternal path =
+  throwErrnoIfMinus1_ "removeFile" $
+    js_removeFile (toJSString path)
+
+canonicalizePathInternal :: FilePath -> IO FilePath
+canonicalizePathInternal path = do
+  cpath <- throwErrnoIfJSNull "canonicalizePath" $
+    js_canonicalizePath (toJSString path)
+  pure (fromJSString cpath)
+
+canonicalizePathWith :: ((FilePath -> IO FilePath) -> FilePath -> IO FilePath)
+                     -> FilePath
+                     -> IO FilePath
+canonicalizePathWith attemptRealpath path = do
+  {-
+  XXX not sure how to do this
+  encoding <- getFileSystemEncoding
+  let realpath path' =
+        GHC.withCString encoding path' (`withRealpath` GHC.peekCString encoding)
+  -}
+  let realpath = pure
+  attemptRealpath realpath path
+
+
+canonicalizePathSimplify :: FilePath -> IO FilePath
+canonicalizePathSimplify = pure
+
+findExecutablesLazyInternal :: ([FilePath] -> String -> ListT IO FilePath)
+                            -> String
+                            -> ListT IO FilePath
+findExecutablesLazyInternal findExecutablesInDirectoriesLazy binary =
+  liftJoinListT $ do
+    path <- getPath
+    pure (findExecutablesInDirectoriesLazy path binary)
+
+{-
+findExecutablesInternal :: FilePath -> IO [FilePath]
+findExecutablesInternal binary = do
+  arr <- throwErrnoIfJSNull "findExecutables" $
+    js_findExecutables (toJSString binary)
+  fmap (map fromJSString) (fromJSArray arr)
+-}
+
+getDirectoryContentsInternal :: FilePath -> IO [FilePath]
+getDirectoryContentsInternal path = do
+  arr <- throwErrnoIfJSNull "getDirectoryContents" $
+    js_getDirectoryContents (toJSString path)
+  fmap (map fromJSString) (fromJSArray arr)
+
+setCurrentDirectoryInternal :: FilePath -> IO ()
+setCurrentDirectoryInternal path =
+  throwErrnoIfMinus1_ "setCurrentDirectory" $
+    js_setCurrentDirectory (toJSString path)
+
+linkToDirectoryIsDirectory :: Bool
+linkToDirectoryIsDirectory = False
+
+getTemporaryDirectoryInternal :: IO FilePath
+getTemporaryDirectoryInternal =
+  fromJSString `fmap` throwErrnoIfJSNull "getTemporaryDirectory"
+                                         js_getTemporaryDirectory
+
+getUserDocumentsDirectoryInternal :: IO FilePath
+getUserDocumentsDirectoryInternal = do
+  modifyIOError (`ioeAddLocation` "getUserDocumentsDirectory") $ do
+    fromJSString `fmap` throwErrnoIfJSNull "getUserDocumentsDirectory"
+                                           js_getUserDocumentsDirectory
+
+getAppUserDataDirectoryInternal :: String -> IO FilePath
+getAppUserDataDirectoryInternal appName = do
+  modifyIOError (`ioeAddLocation` "getAppUserDataDirectory") $ do
+    fromJSString `fmap` throwErrnoIfJSNull "getAppUserDataDirectory"
+      (js_getAppUserDataDirectory (toJSString appName))
+
+getPath :: IO [FilePath]
+getPath = splitSearchPath . fromJSString <$> js_getPath
+
+getHomeDirectoryInternal :: IO FilePath
+getHomeDirectoryInternal = modifyIOError (`ioeAddLocation` "getHomeDirectory") $
+  fromJSString `fmap` throwErrnoIfJSNull "getHomeDirectory" js_getHomeDirectory
+
+getXdgDirectoryInternal :: IO FilePath -> XdgDirectory -> IO FilePath
+getXdgDirectoryInternal =
+  error "fixme: getXdgDirectory not implemented for GHCJS"
+
+getXdgDirectoryListInternal :: XdgDirectoryList -> IO [FilePath]
+getXdgDirectoryListInternal =
+  error "fixme: getXdgDirectoryList not implemented for GHCJS"
+
+getXdgDirectoryFallback :: IO FilePath -> XdgDirectory -> IO FilePath
+getXdgDirectoryFallback getHomeDirectory xdgDir = do
+  (<$> getHomeDirectory) $ flip (</>) $ case xdgDir of
+    XdgData   -> ".local/share"
+    XdgConfig -> ".config"
+    XdgCache  -> ".cache"
+
+getXdgDirectoryListFallback :: XdgDirectoryList -> IO [FilePath]
+getXdgDirectoryListFallback xdgDirs =
+  pure $ case xdgDirs of
+    XdgDataDirs   -> ["/usr/local/share/", "/usr/share/"]
+    XdgConfigDirs -> ["/etc/xdg"]
+
+setTimes :: FilePath -> (Maybe POSIXTime, Maybe POSIXTime) -> IO ()
+setTimes path (atime, mtime) =
+  throwErrnoIfMinus1_ "setFileTimes" $
+    js_setFileTimes (toJSString path) atime' set_atime mtime' set_mtime
+  where
+    f = maybe (0, False) ((,True) . realToFrac)
+    (atime', set_atime) = f atime
+    (mtime', set_mtime) = f mtime
+
+fileTypeFromMetadata :: Metadata -> FileType
+fileTypeFromMetadata info
+  | isLink    = if isDir then DirectoryLink else SymbolicLink
+  | isDir     = Directory
+  | otherwise = File
+  where
+    isLink = js_getFileStatusIsSymbolicLink info
+    isDir  = js_getFileStatusIsDirectory info
+
+fileSizeFromMetadata :: Metadata -> Integer
+fileSizeFromMetadata = round . js_getFileStatusFileSize
+
+accessTimeFromMetadata :: Metadata -> UTCTime
+accessTimeFromMetadata =
+  posixSecondsToUTCTime . realToFrac . js_getFileStatusAccessTime
+
+modificationTimeFromMetadata :: Metadata -> UTCTime
+modificationTimeFromMetadata =
+  posixSecondsToUTCTime . realToFrac . js_getFileStatusModificationTime
+
+type Mode = Int
+
+ownerReadMode, groupReadMode, otherReadMode :: Mode
+ownerReadMode = 0o400
+groupReadMode = 0o040
+otherReadMode = 0o004
+
+ownerWriteMode, groupWriteMode, otherWriteMode :: Mode
+ownerWriteMode = 0o200
+groupWriteMode = 0o020
+otherWriteMode = 0o002
+
+ownerExecuteMode, groupExecuteMode, otherExecuteMode :: Mode
+ownerExecuteMode = 0o100
+groupExecuteMode = 0o010
+otherExecuteMode = 0o001
+
+modeFromMetadata :: Metadata -> Mode
+modeFromMetadata = js_getFileStatusFileMode
+
+allWriteMode :: Mode
+allWriteMode =
+  ownerWriteMode .|.
+  groupWriteMode .|.
+  otherWriteMode
+
+hasWriteMode :: Mode -> Bool
+hasWriteMode m = m .&. allWriteMode /= 0
+
+setWriteMode :: Bool -> Mode -> Mode
+setWriteMode False m = m .&. complement allWriteMode
+setWriteMode True  m = m .|. allWriteMode
+
+setFileMode :: FilePath -> Mode -> IO ()
+setFileMode path mode =
+  throwErrnoIfMinus1_ "setFileMode" $
+    js_setFileMode (toJSString path) mode
+
+setFilePermissions :: FilePath -> Mode -> IO ()
+setFilePermissions = setFileMode
+
+fileAccess :: FilePath -> Bool -> Bool -> Bool -> IO Bool
+fileAccess path r_ok w_ok x_ok = fileAccess' (toJSString path) r_ok w_ok x_ok
+
+fileAccess' :: JSString -> Bool -> Bool -> Bool -> IO Bool
+fileAccess' path r_ok w_ok x_ok = js_getFileAccess path r_ok w_ok x_ok
+
+getAccessPermissions :: FilePath -> IO Permissions
+getAccessPermissions path = do
+  m <- getFileMetadata path
+  let isDir = fileTypeIsDirectory (fileTypeFromMetadata m)
+      path' = toJSString path
+  r <- fileAccess' path' True  False False
+  w <- fileAccess' path' False True  False
+  x <- fileAccess' path' False False True
+  return Permissions
+         { readable   = r
+         , writable   = w
+         , executable = x && not isDir
+         , searchable = x && isDir
+         }
+
+setAccessPermissions :: FilePath -> Permissions -> IO ()
+setAccessPermissions path (Permissions r w e s) = do
+  m <- getFileMetadata path
+  setFileMode path (modifyBit (e || s) ownerExecuteMode .
+                    modifyBit w ownerWriteMode .
+                    modifyBit r ownerReadMode .
+                    modeFromMetadata $ m)
+  where
+    modifyBit :: Bool -> Mode -> Mode -> Mode
+    modifyBit False b m = m .&. complement b
+    modifyBit True  b m = m .|. b
+
+foreign import javascript interruptible
+  "h$directory_getPermissions($1,$c);"
+  js_getPermissions :: JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_setPermissions($1,$2,$c);"
+  js_setPermissions :: JSString -> Int -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_copyPermissions($1,$2,$c);"
+  js_copyPermissions :: JSString -> JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_createDirectory($1,$c);"
+  js_createDirectory :: JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_createSymbolicLink($1,$2,$c);"
+  js_createSymbolicLink :: JSString -> JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_removeDirectory($1,$c);"
+  js_removeDirectory :: JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_removeFile($1,$c);"
+  js_removeFile :: JSString -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_renamePath($1,$2,$c);"
+  js_renamePath :: JSString -> JSString -> IO Int
+
+foreign import javascript unsafe
+  "h$directory_canonicalizePath($1)"
+  js_canonicalizePath :: JSString -> IO JSString
+
+{-
+foreign import javascript interruptible
+  "h$directory_findExecutables($1,$c);"
+  js_findExecutables :: JSString -> IO JSArray
+-}
+
+foreign import javascript interruptible
+  "h$directory_getDirectoryContents($1,$c);"
+  js_getDirectoryContents :: JSString -> IO JSArray
+
+foreign import javascript interruptible
+  "h$directory_copyFileContents($1,$2,$c);"
+  js_copyFileContents :: JSString -> JSString -> IO ()
+
+foreign import javascript unsafe
+  "h$directory_setCurrentDirectory($1)"
+  js_setCurrentDirectory :: JSString -> IO Int
+
+foreign import javascript unsafe
+  "h$directory_getPath()"
+  js_getPath :: IO JSString
+
+foreign import javascript unsafe
+  "h$directory_getHomeDirectory()"
+  js_getHomeDirectory :: IO JSString
+
+foreign import javascript unsafe
+  "h$directory_getAppUserDataDirectory($1)"
+  js_getAppUserDataDirectory :: JSString -> IO JSString
+
+foreign import javascript unsafe
+  "h$directory_getUserDocumentsDirectory()"
+  js_getUserDocumentsDirectory :: IO JSString
+
+foreign import javascript unsafe
+  "h$directory_getTemporaryDirectory()"
+  js_getTemporaryDirectory :: IO JSString
+
+foreign import javascript interruptible
+  "h$directory_getFileStatus($1,$c);"
+  js_getFileStatus :: JSString -> IO JSVal
+
+foreign import javascript interruptible
+  "h$directory_getFileOrSymlinkStatus($1,$c);"
+  js_getFileOrSymlinkStatus :: JSString -> IO JSVal
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusModificationTime($1)"
+  js_getFileStatusModificationTime :: Metadata -> Double
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusAccessTime($1)"
+  js_getFileStatusAccessTime :: Metadata -> Double
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusGroup($1)"
+  js_getFileStatusGroup :: Metadata -> Int
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusOwner($1)"
+  js_getFileStatusOwner :: Metadata -> Int
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusIsDirectory($1)"
+  js_getFileStatusIsDirectory :: Metadata -> Bool
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusIsSymbolicLink($1)"
+  js_getFileStatusIsSymbolicLink :: Metadata -> Bool
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusFileMode($1)"
+  js_getFileStatusFileMode :: Metadata -> Int
+
+foreign import javascript unsafe
+  "h$directory_getFileStatusFileSize($1)"
+  js_getFileStatusFileSize :: Metadata -> Double
+
+foreign import javascript interruptible
+  "h$directory_getFileAccess($1,$2,$3,$4,$c);"
+  js_getFileAccess :: JSString -> Bool -> Bool -> Bool -> IO Bool
+
+foreign import javascript interruptible
+  "h$directory_setFileMode($1,$2,$c);"
+  js_setFileMode :: JSString -> Mode -> IO Int
+
+foreign import javascript interruptible
+  "h$directory_setOwnerAndGroup($1,$2,$3,$c);"
+  js_setOwnerAndGroup :: JSString -> Int -> Int -> IO ()
+
+foreign import javascript interruptible
+  "h$directory_readSymbolicLink($1,$c);"
+  js_readSymbolicLink :: JSString -> IO JSString
+
+foreign import javascript interruptible
+  "h$directory_setFileTimes($1,$2,$3,$4,$5,$c);"
+  js_setFileTimes :: JSString -> Double -> Bool -> Double -> Bool -> IO Int
+#endif
diff -X ../utils/updatePatches.excludes -Nru upstream/pkg/directory/System/Directory/Internal.hs boot/pkg/directory/System/Directory/Internal.hs
--- upstream/pkg/directory/System/Directory/Internal.hs	2001-09-09 13:46:40.000000000 +1200
+++ boot/pkg/directory/System/Directory/Internal.hs	2021-06-10 20:42:21.000000000 +1200
@@ -13,7 +13,9 @@
 module System.Directory.Internal
   ( module System.Directory.Internal.Common
 
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+  , module System.Directory.Internal.GHCJS
+#elif defined(mingw32_HOST_OS)
   , module System.Directory.Internal.Windows
 #else
   , module System.Directory.Internal.Posix
@@ -23,7 +25,9 @@
 
 import System.Directory.Internal.Common
 
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+import System.Directory.Internal.GHCJS
+#elif defined(mingw32_HOST_OS)
 import System.Directory.Internal.Windows
 #else
 import System.Directory.Internal.Posix
diff -X ../utils/updatePatches.excludes -Nru upstream/pkg/directory/directory.cabal boot/pkg/directory/directory.cabal
--- upstream/pkg/directory/directory.cabal	2001-09-09 13:46:40.000000000 +1200
+++ boot/pkg/directory/directory.cabal	2021-06-10 20:42:21.000000000 +1200
@@ -50,6 +50,7 @@
         System.Directory.Internal.Config
         System.Directory.Internal.Posix
         System.Directory.Internal.Windows
+        System.Directory.Internal.GHCJS
 
     include-dirs: .
 
@@ -57,6 +58,8 @@
         base     >= 4.5 && < 4.15,
         time     >= 1.4 && < 1.10,
         filepath >= 1.3 && < 1.5
+    if impl(ghcjs)
+        build-depends: ghcjs-prim
     if os(windows)
         build-depends: Win32 >= 2.2.2 && < 2.9
     else
